/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Eventio STRV test API
 * This is the backend to be used when working on test projects for STRV, specifically web development.
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
export type EventioEventsUnattend200Owner = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsUnattend200AttendeesItem = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsUnattend200 = {
  attendees: EventioEventsUnattend200AttendeesItem[];
  capacity: number;
  createdAt: string;
  description: string;
  id: string;
  owner: EventioEventsUnattend200Owner;
  ownerId: string;
  startsAt: string;
  title: string;
  updatedAt: string;
};

export type EventioEventsAttend200Owner = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsAttend200AttendeesItem = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsAttend200 = {
  attendees: EventioEventsAttend200AttendeesItem[];
  capacity: number;
  createdAt: string;
  description: string;
  id: string;
  owner: EventioEventsAttend200Owner;
  ownerId: string;
  startsAt: string;
  title: string;
  updatedAt: string;
};

export type EventioEventsUpdate200Owner = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsUpdate200AttendeesItem = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsUpdate200 = {
  attendees: EventioEventsUpdate200AttendeesItem[];
  capacity: number;
  createdAt: string;
  description: string;
  id: string;
  owner: EventioEventsUpdate200Owner;
  ownerId: string;
  startsAt: string;
  title: string;
  updatedAt: string;
};

export type EventioEventsUpdateBody = {
  /** @minimum 1 */
  capacity?: number;
  /** @minLength 6 */
  description?: string;
  startsAt?: string;
  /** @minLength 3 */
  title?: string;
};

export type EventioEventsGetById200Owner = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsGetById200AttendeesItem = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsGetById200 = {
  attendees: EventioEventsGetById200AttendeesItem[];
  capacity: number;
  createdAt: string;
  description: string;
  id: string;
  owner: EventioEventsGetById200Owner;
  ownerId: string;
  startsAt: string;
  title: string;
  updatedAt: string;
};

export type EventioEventsGetAll200ItemOwner = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsGetAll200ItemAttendeesItem = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsGetAll200Item = {
  attendees: EventioEventsGetAll200ItemAttendeesItem[];
  capacity: number;
  createdAt: string;
  description: string;
  id: string;
  owner: EventioEventsGetAll200ItemOwner;
  ownerId: string;
  startsAt: string;
  title: string;
  updatedAt: string;
};

export type EventioEventsCreate200Owner = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsCreate200AttendeesItem = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioEventsCreate200 = {
  attendees: EventioEventsCreate200AttendeesItem[];
  capacity: number;
  createdAt: string;
  description: string;
  id: string;
  owner: EventioEventsCreate200Owner;
  ownerId: string;
  startsAt: string;
  title: string;
  updatedAt: string;
};

export type EventioEventsCreateBody = {
  /** @minimum 1 */
  capacity: number;
  /** @minLength 6 */
  description: string;
  startsAt: string;
  /** @minLength 3 */
  title: string;
};

export type EventioAuthRefreshToken200 = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioAuthRefreshTokenBody = {
  refreshToken: string;
};

export type EventioAuthAuthenticate200 = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioAuthAuthenticateBody = {
  email?: string;
  /** @minLength 6 */
  password?: string;
  refreshToken?: string;
};

export type EventioAuthRegister200 = {
  createdAt: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  updatedAt: string;
};

export type EventioAuthRegisterBody = {
  email: string;
  /** @minLength 1 */
  firstName: string;
  /** @minLength 1 */
  lastName: string;
  /** @minLength 6 */
  password: string;
};

export type ErrorResponseIssuesItem = {
  message: string;
};

export type ErrorResponse = {
  code: string;
  issues?: ErrorResponseIssuesItem[];
  message: string;
};

axios.defaults.headers.common = {
  Apikey: "a7a9609a-4e62-41e0-bb37-b87b19a0fe88",
};

axios.defaults.baseURL =
  "https://eventio-testproject-3shel36vx-strvcom.vercel.app/api/rest/v1";

/**
 * @summary Register a new user
 */
export const eventioAuthRegister = (
  eventioAuthRegisterBody: EventioAuthRegisterBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventioAuthRegister200>> => {
  return axios.post(`/auth/register`, eventioAuthRegisterBody, options);
};

export const getEventioAuthRegisterMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioAuthRegister>>,
    TError,
    { data: EventioAuthRegisterBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventioAuthRegister>>,
  TError,
  { data: EventioAuthRegisterBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventioAuthRegister>>,
    { data: EventioAuthRegisterBody }
  > = (props) => {
    const { data } = props ?? {};

    return eventioAuthRegister(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventioAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventioAuthRegister>>
>;
export type EventioAuthRegisterMutationBody = EventioAuthRegisterBody;
export type EventioAuthRegisterMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Register a new user
 */
export const useEventioAuthRegister = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioAuthRegister>>,
    TError,
    { data: EventioAuthRegisterBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof eventioAuthRegister>>,
  TError,
  { data: EventioAuthRegisterBody },
  TContext
> => {
  const mutationOptions = getEventioAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Provide either e-mail and password, or a refresh token.
 * @summary Authentication
 */
export const eventioAuthAuthenticate = (
  eventioAuthAuthenticateBody: EventioAuthAuthenticateBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventioAuthAuthenticate200>> => {
  return axios.post(`/auth/native`, eventioAuthAuthenticateBody, options);
};

export const getEventioAuthAuthenticateMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioAuthAuthenticate>>,
    TError,
    { data: EventioAuthAuthenticateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventioAuthAuthenticate>>,
  TError,
  { data: EventioAuthAuthenticateBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventioAuthAuthenticate>>,
    { data: EventioAuthAuthenticateBody }
  > = (props) => {
    const { data } = props ?? {};

    return eventioAuthAuthenticate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventioAuthAuthenticateMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventioAuthAuthenticate>>
>;
export type EventioAuthAuthenticateMutationBody = EventioAuthAuthenticateBody;
export type EventioAuthAuthenticateMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Authentication
 */
export const useEventioAuthAuthenticate = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioAuthAuthenticate>>,
    TError,
    { data: EventioAuthAuthenticateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof eventioAuthAuthenticate>>,
  TError,
  { data: EventioAuthAuthenticateBody },
  TContext
> => {
  const mutationOptions = getEventioAuthAuthenticateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Refresh token
 */
export const eventioAuthRefreshToken = (
  eventioAuthRefreshTokenBody: EventioAuthRefreshTokenBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventioAuthRefreshToken200>> => {
  return axios.post(
    `/auth/refresh-token`,
    eventioAuthRefreshTokenBody,
    options,
  );
};

export const getEventioAuthRefreshTokenMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioAuthRefreshToken>>,
    TError,
    { data: EventioAuthRefreshTokenBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventioAuthRefreshToken>>,
  TError,
  { data: EventioAuthRefreshTokenBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventioAuthRefreshToken>>,
    { data: EventioAuthRefreshTokenBody }
  > = (props) => {
    const { data } = props ?? {};

    return eventioAuthRefreshToken(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventioAuthRefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventioAuthRefreshToken>>
>;
export type EventioAuthRefreshTokenMutationBody = EventioAuthRefreshTokenBody;
export type EventioAuthRefreshTokenMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Refresh token
 */
export const useEventioAuthRefreshToken = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioAuthRefreshToken>>,
    TError,
    { data: EventioAuthRefreshTokenBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof eventioAuthRefreshToken>>,
  TError,
  { data: EventioAuthRefreshTokenBody },
  TContext
> => {
  const mutationOptions = getEventioAuthRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Create an event
 */
export const eventioEventsCreate = (
  eventioEventsCreateBody: EventioEventsCreateBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventioEventsCreate200>> => {
  return axios.post(`/events`, eventioEventsCreateBody, options);
};

export const getEventioEventsCreateMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioEventsCreate>>,
    TError,
    { data: EventioEventsCreateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventioEventsCreate>>,
  TError,
  { data: EventioEventsCreateBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventioEventsCreate>>,
    { data: EventioEventsCreateBody }
  > = (props) => {
    const { data } = props ?? {};

    return eventioEventsCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventioEventsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventioEventsCreate>>
>;
export type EventioEventsCreateMutationBody = EventioEventsCreateBody;
export type EventioEventsCreateMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Create an event
 */
export const useEventioEventsCreate = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioEventsCreate>>,
    TError,
    { data: EventioEventsCreateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof eventioEventsCreate>>,
  TError,
  { data: EventioEventsCreateBody },
  TContext
> => {
  const mutationOptions = getEventioEventsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get all events
 */
export const eventioEventsGetAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventioEventsGetAll200Item[]>> => {
  return axios.get(`/events`, options);
};

export const getEventioEventsGetAllQueryKey = () => {
  return [`/events`] as const;
};

export const getEventioEventsGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof eventioEventsGetAll>>,
  TError = AxiosError<ErrorResponse>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof eventioEventsGetAll>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEventioEventsGetAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventioEventsGetAll>>
  > = ({ signal }) => eventioEventsGetAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof eventioEventsGetAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type EventioEventsGetAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventioEventsGetAll>>
>;
export type EventioEventsGetAllQueryError = AxiosError<ErrorResponse>;

/**
 * @summary Get all events
 */
export const useEventioEventsGetAll = <
  TData = Awaited<ReturnType<typeof eventioEventsGetAll>>,
  TError = AxiosError<ErrorResponse>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof eventioEventsGetAll>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventioEventsGetAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get event by id
 */
export const eventioEventsGetById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventioEventsGetById200>> => {
  return axios.get(`/events/${id}`, options);
};

export const getEventioEventsGetByIdQueryKey = (id: string) => {
  return ["/events", id] as const;
};

export const getEventioEventsGetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof eventioEventsGetById>>,
  TError = AxiosError<ErrorResponse>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventioEventsGetById>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEventioEventsGetByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventioEventsGetById>>
  > = ({ signal }) => eventioEventsGetById(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof eventioEventsGetById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type EventioEventsGetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventioEventsGetById>>
>;
export type EventioEventsGetByIdQueryError = AxiosError<ErrorResponse>;

/**
 * @summary Get event by id
 */
export const useEventioEventsGetById = <
  TData = Awaited<ReturnType<typeof eventioEventsGetById>>,
  TError = AxiosError<ErrorResponse>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventioEventsGetById>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventioEventsGetByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update an event
 */
export const eventioEventsUpdate = (
  id: string,
  eventioEventsUpdateBody: EventioEventsUpdateBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventioEventsUpdate200>> => {
  return axios.patch(`/events/${id}`, eventioEventsUpdateBody, options);
};

export const getEventioEventsUpdateMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioEventsUpdate>>,
    TError,
    { id: string; data: EventioEventsUpdateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventioEventsUpdate>>,
  TError,
  { id: string; data: EventioEventsUpdateBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventioEventsUpdate>>,
    { id: string; data: EventioEventsUpdateBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return eventioEventsUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventioEventsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventioEventsUpdate>>
>;
export type EventioEventsUpdateMutationBody = EventioEventsUpdateBody;
export type EventioEventsUpdateMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Update an event
 */
export const useEventioEventsUpdate = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioEventsUpdate>>,
    TError,
    { id: string; data: EventioEventsUpdateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof eventioEventsUpdate>>,
  TError,
  { id: string; data: EventioEventsUpdateBody },
  TContext
> => {
  const mutationOptions = getEventioEventsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Delete an event
 */
export const eventioEventsDelete = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.delete(`/events/${id}`, options);
};

export const getEventioEventsDeleteMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioEventsDelete>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventioEventsDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventioEventsDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return eventioEventsDelete(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventioEventsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventioEventsDelete>>
>;

export type EventioEventsDeleteMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Delete an event
 */
export const useEventioEventsDelete = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioEventsDelete>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof eventioEventsDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getEventioEventsDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Attend an event
 */
export const eventioEventsAttend = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventioEventsAttend200>> => {
  return axios.post(`/events/${id}/attendees/me`, undefined, options);
};

export const getEventioEventsAttendMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioEventsAttend>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventioEventsAttend>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventioEventsAttend>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return eventioEventsAttend(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventioEventsAttendMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventioEventsAttend>>
>;

export type EventioEventsAttendMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Attend an event
 */
export const useEventioEventsAttend = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioEventsAttend>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof eventioEventsAttend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getEventioEventsAttendMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Unattend an event
 */
export const eventioEventsUnattend = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EventioEventsUnattend200>> => {
  return axios.delete(`/events/${id}/attendees/me`, options);
};

export const getEventioEventsUnattendMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioEventsUnattend>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventioEventsUnattend>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventioEventsUnattend>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return eventioEventsUnattend(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventioEventsUnattendMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventioEventsUnattend>>
>;

export type EventioEventsUnattendMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Unattend an event
 */
export const useEventioEventsUnattend = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventioEventsUnattend>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof eventioEventsUnattend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getEventioEventsUnattendMutationOptions(options);

  return useMutation(mutationOptions);
};
